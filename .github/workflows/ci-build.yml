name: build

on:
  push:
    branches:
    tags:
    paths:
      - ".github/workflows/ci-build.yml"
      - "app/**"
      - "frontend/**"
      - ".dockerignore"
      - "Dockerfile"
      - "!**.md"

  pull_request:
    paths:
      - ".github/workflows/ci-build.yml"
      - "app/**"
      - "frontend/**"
      - ".dockerignore"
      - "Dockerfile"
      - "!**.md"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ 16.15.1 ]
    steps:
      - name: check for tags
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo ${GITHUB_REF} | cut -d'/' -f3
             
      - name: disable and stop mono-xsp4.service
        run: |
          sudo systemctl stop mono-xsp4.service || true
          sudo systemctl disable mono-xsp4.service || true

      - name: set up go 1.19
        uses: actions/setup-go@v2
        with:
          go-version: '1.19'
        id: go

      - name: checkout
        uses: actions/checkout@v2
        
      # build frontend stage
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'
          cache-dependency-path: "frontend/yarn.lock"

      - name: Install project dependencies
        working-directory: ./frontend
        run: |
          yarn --prefer-offline
          
      - name: Build frontend
        working-directory: ./frontend
        run: |
          yarn build
          cp -r build/* ../app/web
          ls -l ../app/web
      
      - name: store JS build artifcats
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: actions/upload-artifact@v2
        with:
          name: js-build-artifacts
          path: app/web   
    
  release-linux-windows-binary:
    needs: build 
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    steps:            
      - name: check for tags
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo ${GITHUB_REF} | cut -d'/' -f3 
        
      - name: set up go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
        id: go
        
      - name: checkout
        uses: actions/checkout@v2  
        
      - name: restore JS build artifcats
        uses: actions/upload-artifact@v2
        with:
          name: js-build-artifacts
          path: app/web   
          
      - name: check for ui build
        run: ls -l ./app/web
        
      - name: Install cross-compiler for linux/arm64
        run: |
          sudo apt-get update
          sudo apt-get -y install gcc-aarch64-linux-gnu mingw-w64 gcc-arm*
        
      - name: Create release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --config .goreleaser.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}  
          
  release-darwin-binary:
    needs: release-linux-windows-binary
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    runs-on: macos-latest
    steps:
      - name: check for tags
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: echo ${GITHUB_REF} | cut -d'/' -f3 
        
      - name: set up go 1.19
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'
        id: go
        
      - name: checkout
        uses: actions/checkout@v2 
        
      - name: restore JS build artifcats
        uses: actions/upload-artifact@v2
        with:
          name: js-build-artifacts
          path: app/web      
          
      - name: check for ui build
        run: ls -l ./app/web
        
      - name: Create release
        uses: goreleaser/goreleaser-action@v4
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist --config .goreleaser-darwin.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}       
          GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}  
